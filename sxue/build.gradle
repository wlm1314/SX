apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def config = rootProject.ext.android//配置
def lib = rootProject.ext.dependencies//依赖

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    dataBinding {
        enabled true
    }
    defaultConfig {
        applicationId "com.edu.sxue"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    signingConfigs {
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
    }
    //调用配置文件
    getSigningProperties()
    buildTypes {
        release {
            minifyEnabled false //混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            zipAlignEnabled true
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    //自定义apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name.equals('debug')) {
                output.outputFile = new File(
                        output.outputFile.parent,
                        "${variant.productFlavors[0].name}-${variant.buildType.name}-${defaultConfig.versionName}.apk".toLowerCase())
            }
            if (variant.buildType.name.equals('release')) {
                output.outputFile = new File(
                        output.outputFile.parent,
                        "${variant.productFlavors[0].name}-${variant.buildType.name}-${defaultConfig.versionName}.apk")
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//指定将源码编译的级别，以下会将代码编译到1.7的自己码格式
    retrolambda {
        javaVersion JavaVersion.VERSION_1_7
    }
    productFlavors {
        SXue {
        }
    }

}

//读取签名配置文件
def getSigningProperties() {
    def propFile = file('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    //dagger2
    provided lib.dagger_compiler
    compile lib.dagger
    compile project(':baselib')
    compile project(':vitamio')
    compile project(':pickerview')
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.facebook.fresco:fresco:0.9.0+'
    compile 'com.github.hackware1993:MagicIndicator:1.5.0'
}
